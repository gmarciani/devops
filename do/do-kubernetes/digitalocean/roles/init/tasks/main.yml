---
- name: Ensure SSH key exists
  user:
    name: "{{ ansible_user_id }}"
    generate_ssh_key: yes
    ssh_key_file: .ssh/id_rsa

- name: Ensure SSH key exists at DigitalOcean
  digital_ocean:
    command: ssh
    state: present
    name: gmarciani@do_kubernetes
    ssh_pub_key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
    api_token: "{{ lookup('env','DO_TOKEN') }}"
  register: my_ssh_key

- name: Ensure droplets exist
  digital_ocean:
    command: droplet
    state: present
    name: "{{ item.name }}"
    image_id: "{{ item.image_id }}"
    size_id: "{{ item.size_id }}"
    region_id: "{{ item.region_id }}"
    ssh_key_ids: "{{ my_ssh_key.ssh_key.id }}"
    unique_name: yes
    api_token: "{{ lookup('env','DO_TOKEN') }}"
  with_items: "{{ droplets }}"
  register: droplet_info

- name: Report droplets
  debug:
    msg: "Created {{ item.droplet.name }}: {{ item.droplet.ip_address }}"
  with_items: "{{ droplet_info.results }}"

- name: Ensure tags exist
  digital_ocean_tag:
    name: "{{ item }}"
    state: present
    api_token: "{{ lookup('env','DO_TOKEN') }}"
  with_items: "{{ tags }}"
  when: "proxy.http == ''"

- name: Tag droplets
  digital_ocean_tag:
    name: "{{ item.1.tag }}"
    resource_id: "{{ item.0.droplet.id }}"
    state: present
    api_token: "{{ lookup('env','DO_TOKEN') }}"
  with_together:
    - "{{ droplet_info.results }}"
    - "{{ droplets }}"
  when: "proxy.http == ''"

- name: Install packages
  shell: "ssh root@{{ item[0].droplet.ip_address }} -C 'sudo apt-get install {{ item[1] }} -y'"
  with_nested:
    - "{{ droplet_info.results }}"
    - [ "python" ]

- name: Create inventory
  template:
    src: inventory
    dest: "{{ playbook_dir }}/../kubernetes/inventory/inventory"
    mode: 775
